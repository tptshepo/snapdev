using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using {{package}}.Models;
using {{package}}.Extensions;

namespace {{package}}.Persistence
{
  public class {{titlecase}}Repository : I{{titlecase}}Repository
  {
    private readonly AppDbContext context;

    public {{titlecase}}Repository(AppDbContext context)
    {
      this.context = context;
    }
    public async Task<{{titlecase}}> Get{{titlecase}}(int id, bool includeRelated = true)
    {
      if (!includeRelated)
        return await context.{{ptitlecase}}.FindAsync(id);

      return await context.{{ptitlecase}}
      {{#properties}}
      {{#keyvaluefilter}}
        .Include(i => i.{{titlecase}})
      {{/keyvaluefilter}}
      {{/properties}}
        .SingleOrDefaultAsync(v => v.Id == id);
    }

    public void Add({{titlecase}} record)
    {
      record.CreatedBy = "System";
      record.CreatedOn = DateTime.Now;

      context.{{ptitlecase}}.Add(record);
    }

    public void Update({{titlecase}} record)
    {

    }

    public void Remove({{titlecase}} record)
    {
      context.Remove(record);
    }

    public async Task<QueryResult<{{titlecase}}>> Get{{ptitlecase}}({{titlecase}}Query queryObj)
    {
      var result = new QueryResult<{{titlecase}}>();

      var query = context.{{ptitlecase}}
      {{#properties}}
      {{#keyvaluefilter}}
        .Include(i => i.{{titlecase}})
      {{/keyvaluefilter}}
      {{/properties}}
        .AsQueryable();

      query = query.ApplyFiltering(queryObj);

      var columnsMap = new Dictionary<string, Expression<Func<{{titlecase}}, object>>>()
      {
      };
      query = query.ApplyOrdering(queryObj, columnsMap);

      result.TotalItems = await query.CountAsync();

      query = query.ApplyPaging(queryObj);

      result.Items = await query.ToListAsync();

      return result;
    }

  }
}
