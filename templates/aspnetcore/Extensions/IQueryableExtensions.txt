using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using {{package}}.Models;

namespace {{package}}.Extensions
{
  public static class IQueryableExtensions
  {
   
    public static IQueryable<{{titlecase}}> ApplyFiltering(this IQueryable<{{titlecase}}> query, {{titlecase}}Query queryObj)
    {
      {{#properties}}
      {{#sortandfilter}}
      {{#numberfilter}}
      if (queryObj.{{titlecase}} > 0)
        query = query.Where(q => q.{{titlecase}} == queryObj.{{titlecase}});
      {{/numberfilter}}
      {{#stringfilter}}
      if (!string.IsNullOrWhiteSpace(queryObj.{{titlecase}}))
        query = query.Where(q => q.{{titlecase}}.Contains(queryObj.{{titlecase}}));
      {{/stringfilter}}
      {{#datetimefilter}}
      if (!string.IsNullOrWhiteSpace(queryObj.{{titlecase}}))
        query = query.Where(q => q.{{titlecase}}.ToString().Contains(queryObj.{{titlecase}}));
      {{/datetimefilter}}
      {{#boolfilter}}
      if (!string.IsNullOrWhiteSpace(queryObj.{{titlecase}}))
        query = query.Where(q => q.{{titlecase}} == (queryObj.{{titlecase}}.ToLower() == "yes" ? true : false));
      {{/boolfilter}}
      {{/sortandfilter}}
      {{/properties}}

      return query;
    }

    public static IQueryable<T> ApplyOrdering<T>(this IQueryable<T> query, IQueryObject queryObj, Dictionary<string, Expression<Func<T, object>>> columnsMap)
    {
      if (String.IsNullOrWhiteSpace(queryObj.SortBy) || !columnsMap.ContainsKey(queryObj.SortBy))
        return query;

      if (queryObj.IsSortAscending)
        return query.OrderBy(columnsMap[queryObj.SortBy]);
      else
        return query.OrderByDescending(columnsMap[queryObj.SortBy]);
    }

    public static IQueryable<T> ApplyPaging<T>(this IQueryable<T> query, IQueryObject queryObj)
    {
      if (queryObj.Page <= 0)
        queryObj.Page = 1;

      if (queryObj.PageSize <= 0)
        queryObj.PageSize = 10000;

      return query.Skip((queryObj.Page - 1) * queryObj.PageSize).Take(queryObj.PageSize);
    }


  }
}
