import { ToastyService } from 'ng2-toasty';
import { Utils } from '../helpers/Utils';
import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';
import { IAppState } from '../store';
import { BEGIN_SERVER_CALL, END_SERVER_CALL } from '../actions';
import { NgRedux } from '@angular-redux/store';

export class ApiService {
  PRE_ADD_LOOKUP: string = '';
  PRE_ADD_ITEMS: string = '';
  PRE_GET_ITEM: string = '';
  PRE_EXECUTE_ITEM: string = '';
  PRE_CREATE_ITEM: string = '';
  PRE_UPDATE_ITEM: string = '';
  PRE_DELETE_ITEM: string = '';
  PRE_VALIDATE_ITEM: string = '';

  ADD_LOOKUP: string = '';
  ADD_ITEMS: string = '';
  GET_ITEM: string = '';
  EXECUTE_ITEM: string = '';
  CREATE_ITEM: string = '';
  UPDATE_ITEM: string = '';
  DELETE_ITEM: string = '';
  VALIDATE_ITEM: string = '';

  constructor(
    protected controller: string,
    protected actionSuffix: string,
    protected http: Http,
    protected toastyService: ToastyService,
    protected ngRedux: NgRedux<IAppState>
  ) {
    this.PRE_ADD_LOOKUP = 'PRE_ADD_LOOKUP_' + actionSuffix.toUpperCase();
    this.PRE_ADD_ITEMS = 'PRE_ADD_ITEMS_' + actionSuffix.toUpperCase();
    this.PRE_GET_ITEM = 'PRE_GET_ITEM_' + actionSuffix.toUpperCase();
    this.PRE_EXECUTE_ITEM = 'PRE_EXECUTE_ITEM_' + actionSuffix.toUpperCase();
    this.PRE_CREATE_ITEM = 'PRE_CREATE_ITEM_' + actionSuffix.toUpperCase();
    this.PRE_UPDATE_ITEM = 'PRE_UPDATE_ITEM_' + actionSuffix.toUpperCase();
    this.PRE_DELETE_ITEM = 'PRE_DELETE_ITEM_' + actionSuffix.toUpperCase();
    this.PRE_VALIDATE_ITEM = 'PRE_VALIDATE_ITEM_' + actionSuffix.toUpperCase();

    this.ADD_LOOKUP = 'ADD_LOOKUP_' + actionSuffix.toUpperCase();
    this.ADD_ITEMS = 'ADD_ITEMS_' + actionSuffix.toUpperCase();
    this.GET_ITEM = 'GET_ITEM_' + actionSuffix.toUpperCase();
    this.EXECUTE_ITEM = 'EXECUTE_ITEM_' + actionSuffix.toUpperCase();
    this.CREATE_ITEM = 'CREATE_ITEM_' + actionSuffix.toUpperCase();
    this.UPDATE_ITEM = 'UPDATE_ITEM_' + actionSuffix.toUpperCase();
    this.DELETE_ITEM = 'DELETE_ITEM_' + actionSuffix.toUpperCase();
    this.VALIDATE_ITEM = 'VALIDATE_ITEM_' + actionSuffix.toUpperCase();
  }

  public getEndpoint() {
    return `/api/${this.controller}`;
  }

  throwError(): void {
    this.throwErrorWithMessage(
      'An error has occured while processing your request.'
    );
  }
  throwErrorWithMessage(message: string): void {
    this.toastyService.error({
      title: 'Error',
      msg: message,
      theme: 'bootstrap',
      showClose: true,
      timeout: 5000
    });
  }

  execute(path, queryObject) {
    return this.http
      .get(
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject)
      )
      .map(res => res.json());
  }

  queryItems(path, queryObject) {
    return this.http
      .get(
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject)
      )
      .map(res => res.json());
  }

  getItem(id) {
    return this.http.get(this.getEndpoint() + '/' + id).map(res => res.json());
  }

  deleteItem(id) {
    return this.http
      .delete(this.getEndpoint() + '/' + id)
      .map(res => res.json());
  }

  getItems() {
    return this.http.get(this.getEndpoint()).map(res => res.json());
  }

  createItem(model: any) {
    return this.http.post(this.getEndpoint(), model).map(res => res.json());
  }

  updateItem(model: any) {
    return this.http
      .put(this.getEndpoint() + '/' + model.id, model)
      .map(res => res.json());
  }

  post(path, model: any) {
    return this.http
      .post(`/api/${this.controller}/${path}`, model)
      .map(res => res.json());
  }

  updateQuery(path, model: any, queryObject) {
    return this.http
      .put(
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject),
        model
      )
      .map(res => res.json());
  }

  // REDUX VERSIONS

  executeAsync(path, queryObject) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_EXECUTE_ITEM });
    this.http
      .get(
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject)
      )
      .map(res => res.json())
      .map(payload => ({ type: this.EXECUTE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  executeItemAsync(
    path,
    model: any,
    actionName,
    queryObject = {},
    success = null,
    failed = null
  ) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    // this.ngRedux.dispatch({ type: this.PRE_CREATE_ITEM });
    this.http
      .post(
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject),
        model
      )
      .map(res => res.json())
      .map(payload => ({ type: actionName, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (success) success();
        },
        err => {
          if (failed) failed(err);
          this.ngRedux.dispatch({
            type: actionName,
            item: { result: err._body }
          });
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  queryItemsAsyncPromise(path, queryObject) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_ADD_ITEMS });

    var url = '';
    if (Utils.stringIsNullOrEmpty(path))
      url = `/api/${this.controller}?` + Utils.toQueryString(queryObject);
    else
      url =
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject);

    return this.http
      .get(url)
      .map(res => res.json())
      .map(payload => ({ type: this.ADD_ITEMS, items: payload.items }))
      .toPromise()
      .then(action => {
        this.ngRedux.dispatch(action);
        this.ngRedux.dispatch({type: END_SERVER_CALL});
      })
      .catch(err => {
        console.log("queryItemsAsyncPromise::Error");
        this.ngRedux.dispatch({type: END_SERVER_CALL});
        this.throwError();
      });
  }

  queryItemsAsync(path, queryObject) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_ADD_ITEMS });

    var url = '';
    if (Utils.stringIsNullOrEmpty(path))
      url = `/api/${this.controller}?` + Utils.toQueryString(queryObject);
    else
      url =
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject);

    this.http
      .get(url)
      .map(res => res.json())
      .map(payload => ({ type: this.ADD_ITEMS, items: payload.items }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  /*
        example usage: 
            API Data:
            {
                "templates": [
                    {
                        "name": "A8888EEREPATT"
                    }
                ]
            }
            queryCustomItemsAsync("templates", {}, "GET_ITEM_EMS_TEMPLATES", "templates")
    */
  queryCustomItemsAsync(path, queryObject, itemsActionName, itemsFieldName) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });

    var url = '';
    if (Utils.stringIsNullOrEmpty(path)) {
      url = `/api/${this.controller}`;
    } else {
      url = `/api/${this.controller}/${path}`;
    }

    let qs = Utils.toQueryString(queryObject);
    if (qs.length > 0) {
      url += `?${qs}`;
    }

    this.http
      .get(url)
      .map(res => res.json())
      .map(payload => ({
        type: itemsActionName,
        items: payload[itemsFieldName]
      }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  getItemAsync(id) {
    if (id == 0) return;
    if (!id) return;

    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_GET_ITEM });

    // first check if the local state has the id
    // var item = this.ngRedux
    //   .getState()
    //   .general[this.actionSuffix].find(f => f.id == id);
    // if (item) {
    //   this.ngRedux.dispatch({ type: this.GET_ITEM, item });
    //   this.ngRedux.dispatch({ type: END_SERVER_CALL });
    //   return;
    // }

    this.http
      .get(this.getEndpoint() + '/' + id)
      .map(res => res.json())
      .map(payload => ({ type: this.GET_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  deleteItemAsync(model: any, success) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_DELETE_ITEM });
    this.http
      .delete(this.getEndpoint() + '/' + model.id)
      .map(res => res.json())
      .map(payload => ({ type: this.DELETE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (success) success();
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  cancelItemAsync(model: any, success) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.http
      .post(this.getEndpoint() + '/cancel', model)
      .map(res => res.json())
      .subscribe(
        action => {
          if (success) success();
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  getItemsAsync() {
    this.getItemsWithCallbackAsync(null, null);
  }
  getItemsWithCallbackAsync(success, fail) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_ADD_ITEMS });
    this.http
      .get(this.getEndpoint())
      .map(res => res.json())
      .map(payload => ({ type: this.ADD_ITEMS, items: payload.items }))
      .subscribe(
        action => {
          if (success) success();
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          if (fail) fail();
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  getLookupAsync() {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_ADD_LOOKUP });
    this.http
      .get(this.getEndpoint() + '/lookup')
      .map(res => res.json())
      .map(payload => ({ type: this.ADD_LOOKUP, items: payload.items }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          this.throwError();
        }
      );
  }

  createItemAsync(model: any, success, failed) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_CREATE_ITEM });
    this.http
      .post(this.getEndpoint(), model)
      .map(res => res.json())
      .map(payload => ({ type: this.CREATE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (success) success();
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (failed) failed(err);
        }
      );
  }

  validateItemAsync(model: any, success, failed) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_VALIDATE_ITEM });
    this.http
      .post(this.getEndpoint() + "/validate", model)
      .map(res => res.json())
      .map(payload => ({ type: this.VALIDATE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (success) success();
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (failed) failed(err);
        }
      );
  }

  createBatchAsync(model: any, success, failed) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_CREATE_ITEM });
    this.http
      .post(this.getEndpoint() + '/batchadd', model)
      .map(res => res.json())
      .map(payload => ({ type: this.CREATE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (success) success();
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (failed) failed(err);
        }
      );
  }

  updateItemAsync(model: any, success, failed) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_UPDATE_ITEM });
    this.http
      .put(this.getEndpoint() + '/' + model.id, model)
      .map(res => res.json())
      .map(payload => ({ type: this.UPDATE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (success) success();
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
          if (failed) failed(err);
        }
      );
  }

  updateQueryAsync(path, model: any, queryObject) {
    this.ngRedux.dispatch({ type: BEGIN_SERVER_CALL });
    this.ngRedux.dispatch({ type: this.PRE_UPDATE_ITEM });
    this.http
      .put(
        `/api/${this.controller}/${path}?` + Utils.toQueryString(queryObject),
        model
      )
      .map(res => res.json())
      .map(payload => ({ type: this.UPDATE_ITEM, item: payload }))
      .subscribe(
        action => {
          this.ngRedux.dispatch(action);
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        },
        err => {
          this.ngRedux.dispatch({ type: END_SERVER_CALL });
        }
      );
  }
}
