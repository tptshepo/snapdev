import { Component, OnInit, OnDestroy } from '@angular/core';
import { NgRedux, select } from '@angular-redux/store';
import { IAppState } from './../../../store';
import { Router, ActivatedRoute } from '@angular/router';
import { {{titlecase}}ApiService } from '../../../services/{{dashlcase}}.api.service';
import { GET_ITEM_{{pucase}} } from '../../../actions';
import { CompleterService, CompleterData, CompleterItem } from 'ng2-completer';
import { Utils } from './../../../helpers/Utils';
import { tassign } from 'tassign';
import { I{{titlecase}} } from '../../../models/{{dashlcase}}.model';

@Component({
  selector: 'app-{{dashlcase}}-create',
  templateUrl: './{{dashlcase}}-create.component.html',
  styleUrls: ['./{{dashlcase}}-create.component.css']
})
export class {{titlecase}}CreateComponent implements OnInit, OnDestroy {
  isSaving: boolean;
  subscriptions = [];
  errors: any[] = [];
  item: any = {};

  @select((s: IAppState) => s.general.serverCallsInProgress)
  serverCallsInProgress;

  {{#properties}}
  {{#formcreate}}
  {{#foreignobject}}
  {{camelcase}}SearchString: string;
  {{camelcase}}DataService: CompleterData;
  {{/foreignobject}}
  {{/formcreate}}
  {{/properties}}

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private ngRedux: NgRedux<IAppState>,
    private {{camelcase}}ApiService: {{titlecase}}ApiService,
    private completerService: CompleterService
  ) {
    // foreigh key completer
    {{#properties}}
    {{#formcreate}}
    {{#foreignobject}}
    const {{camelcase}}Data =  this.ngRedux.getState().general.{{pcamelcase}}.filter(f => f.active).map(m => { 
      return {
        id: m.id, 
        name: m.name
      } 
    });
    this.{{camelcase}}DataService = completerService.local({{camelcase}}Data, 'name', 'name');
    {{/foreignobject}}
    {{/formcreate}}
    {{/properties}}
  }

  ngOnInit() {
    this.ngRedux.dispatch({
      type: GET_ITEM_{{pucase}},
      item: {
        id: 0,
        active: true
      }
    });
  }

  {{#properties}}
  {{#formcreate}}
  {{#foreignobject}}
  {{camelcase}}CompleterSelected(selected: CompleterItem) {
    if (!selected) return;
    this.item.{{camelcase}}Id = selected.originalObject.id
  }

  {{camelcase}}CompleterBlur() {
    if (Utils.stringIsNullOrEmpty(this.{{camelcase}}SearchString)) {
      this.item.{{camelcase}}Id = 0;
    }
  }
  {{/foreignobject}}
  {{/formcreate}}
  {{/properties}}

  saveForm() {
    if (this.isSaving) return;

    this.isSaving = true;
    this.{{camelcase}}ApiService.createItemAsync(
      this.item,
      () => {
        this.isSaving = false;
        this.router.navigate(['/{{plcase}}']);
      },
      err => {
        this.isSaving = false;
        if (err) this.parseErrors(JSON.parse(err._body));
      }
    );
  }

  public parseErrors(errorJson) {
    this.errors = Object.getOwnPropertyNames(errorJson).map(er => {
      return errorJson[er].map(e => e);
    });
  }

  ngOnDestroy() {
    this.subscriptions.forEach(e => {
      if (typeof e === 'function') {
        e();
      } else {
        e.unsubscribe();
      }
    });
    this.subscriptions = null;
  }
}
