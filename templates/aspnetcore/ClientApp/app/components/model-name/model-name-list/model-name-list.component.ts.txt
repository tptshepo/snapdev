import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import { NgRedux, select } from '@angular-redux/store';
import { IAppState } from './../../../store';
import { Router } from '@angular/router';
import {
  GET_ITEM_{{pucase}},
  FILTER_{{pucase}},
  FILTER_RESET_{{pucase}}
} from './../../../actions';
import { {{titlecase}}ApiService } from '../../../services/{{dashlcase}}.api.service';
import { ModalComponent } from '../../../../../libs/ng2-bs3-modal/ng2-bs3-modal';

@Component({
  selector: 'app-{{dashlcase}}-list',
  templateUrl: './{{dashlcase}}-list.component.html',
  styleUrls: ['./{{dashlcase}}-list.component.css']
})
export class {{titlecase}}ListComponent implements OnInit, OnDestroy {
  subscriptions = [];
  selectedRowIndex: number;

  @ViewChild('modalDelete{{titlecase}}') modalDelete{{titlecase}}: ModalComponent;

  @select((s: IAppState) => s.general.selected{{titlecase}}) selected{{titlecase}};
  @select((s: IAppState) => s.general.{{pcamelcase}}) {{pcamelcase}};
  @select((s: IAppState) => s.general.serverCallsInProgress) serverCallsInProgress;

  {{camelcase}}Query: any;

  columns: any[] = [
    { title: "#", key: "rowIndex", isSortable: false },
    {{#properties}}
    {{#sortandfilter}}
    { title: "{{title}}", key: "{{camelcase}}", isSortable: false },
    {{/sortandfilter}}
    {{/properties}}
    {}
  ];

  constructor(
    private router: Router,
    private ngRedux: NgRedux<IAppState>,
    private {{camelcase}}ApiService: {{titlecase}}ApiService
  ) {
    var sub = this.ngRedux.subscribe(() => {
      var store = this.ngRedux.getState();
      this.{{camelcase}}Query = store.general.{{camelcase}}Query;
    });
    this.subscriptions.push(sub);
  }

  ngOnInit() {
    var store = this.ngRedux.getState();
    this.{{camelcase}}Query = store.general.{{camelcase}}Query;
    this.populateItems();
  }

  populateItems() {
    this.{{camelcase}}ApiService.queryItemsAsync('', this.{{camelcase}}Query);
  }

  onFilterChange() {
    this.{{camelcase}}Query.page = 1;
    this.ngRedux.dispatch({
      type: FILTER_{{pucase}},
      query: this.{{camelcase}}Query
    });
    this.populateItems();
  }

  resetFilter() {
    this.ngRedux.dispatch({ type: FILTER_RESET_{{pucase}} });
    this.populateItems();
    return false;
  }

  sortBy(columnName) {
    if (this.{{camelcase}}Query.sortBy === columnName) {
      this.{{camelcase}}Query.isSortAscending = !this.{{camelcase}}Query.isSortAscending;
    } else {
      this.{{camelcase}}Query.sortBy = columnName;
      this.{{camelcase}}Query.isSortAscending = true;
    }
    this.populateItems();
  }

  onPageChange(page) {
    this.{{camelcase}}Query.page = page;
    this.ngRedux.dispatch({
      type: FILTER_{{pucase}},
      query: this.{{camelcase}}Query
    });
    this.populateItems();
  }

  create{{titlecase}}() {
    this.router.navigate(['/{{plcase}}/create']);
  }

  edit{{titlecase}}(model) {
    this.router.navigate(['/{{plcase}}', model.id]);
  }

  delete{{titlecase}}(model, rowIndex) {
    this.selectedRowIndex = rowIndex;
    this.ngRedux.dispatch({ type: GET_ITEM_{{pucase}}, item: model });
    this.modalDelete{{titlecase}}.open();
  }

  delete{{titlecase}}Commit() {
    this.{{camelcase}}ApiService.deleteItemAsync(
      this.ngRedux.getState().general.selected{{titlecase}},
      () => {
        this.modalDelete{{titlecase}}.dismiss();
      }
    );
  }

  reload() {
    this.populateItems();
  }

  ngOnDestroy() {
    this.subscriptions.forEach(e => {
      if (typeof e === 'function') {
        e();
      } else {
        e.unsubscribe();
      }
    });
    this.subscriptions = null;
  }
}
