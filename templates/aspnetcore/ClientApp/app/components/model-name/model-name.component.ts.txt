import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import { NgRedux, select } from '@angular-redux/store';
import { IAppState } from './../../store';
import { Router } from '@angular/router';
import {
  GET_ITEM_CHATUSERS,
  FILTER_CHATUSERS,
  FILTER_RESET_CHATUSERS
} from './../../actions';
import { ChatUserService } from '../../services/model-name.service';
import { ModalComponent } from '../../../libs/ng2-bs3-modal/ng2-bs3-modal';

@Component({
  selector: 'app-chat-user',
  templateUrl: './chat-user.component.html',
  styleUrls: ['./chat-user.component.css']
})
export class ChatUserComponent implements OnInit, OnDestroy {
  subscriptions = [];

  @ViewChild('modalDeleteChatUser') modalDeleteChatUser: ModalComponent;

  @select((s: IAppState) => s.general.selectedChatUser) selectedChatUser;
  @select((s: IAppState) => s.general.chatUsers) chatUsers;
  @select((s: IAppState) => s.general.serverCallsInProgress)
  serverCallsInProgress;

  chatUserQuery: any;

  columns: any[] = [
    { title: 'Chat Id', key: 'chatId', isSortable: false },
    { title: 'First Name', key: 'firstName', isSortable: false },
    { title: 'Last Name', key: 'lastName', isSortable: false },
    { title: 'User Name', key: 'userName', isSortable: false },
    { title: 'Chat Type', key: 'chatType', isSortable: false },
    { title: 'Cell No', key: 'cellNo', isSortable: false },
    { title: 'Email Address', key: 'emailAddress', isSortable: false },
    { title: 'Active', key: 'active', isSortable: false },
    { title: 'On StandBy', key: 'supportStandBy', isSortable: false },
    {}
  ];

  constructor(
    private router: Router,
    private ngRedux: NgRedux<IAppState>,
    private chatUserService: ChatUserService
  ) {
    var sub = this.ngRedux.subscribe(() => {
      var store = this.ngRedux.getState();
      this.chatUserQuery = store.general.chatUserQuery;
    });
    this.subscriptions.push(sub);
  }

  ngOnInit() {
    var store = this.ngRedux.getState();
    this.chatUserQuery = store.general.chatUserQuery;
    this.populateItems();
  }

  populateItems() {
    this.chatUserService.queryItemsAsync('', this.chatUserQuery);
  }

  onFilterChange() {
    this.chatUserQuery.page = 1;
    this.ngRedux.dispatch({
      type: FILTER_CHATUSERS,
      query: this.chatUserQuery
    });
    this.populateItems();
  }

  resetFilter() {
    this.ngRedux.dispatch({ type: FILTER_RESET_CHATUSERS });
    this.populateItems();
    return false;
  }

  sortBy(columnName) {
    if (this.chatUserQuery.sortBy === columnName) {
      this.chatUserQuery.isSortAscending = !this.chatUserQuery.isSortAscending;
    } else {
      this.chatUserQuery.sortBy = columnName;
      this.chatUserQuery.isSortAscending = true;
    }
    this.populateItems();
  }

  onPageChange(page) {
    this.chatUserQuery.page = page;
    this.ngRedux.dispatch({
      type: FILTER_CHATUSERS,
      query: this.chatUserQuery
    });
    this.populateItems();
  }

  addChatUser() {
    this.router.navigate(['/chatusers/add']);
  }

  editChatUser(model) {
    this.router.navigate(['/chatusers', model.id]);
  }

  deleteChatUser(model) {
    this.ngRedux.dispatch({ type: GET_ITEM_CHATUSERS, item: model });
    this.modalDeleteChatUser.open();
  }

  deleteChatUserCommit() {
    this.chatUserService.deleteItemAsync(
      this.ngRedux.getState().general.selectedChatUser,
      () => {
        this.modalDeleteChatUser.dismiss();
      }
    );
  }

  manageNotifications(model) {
    this.router.navigate(['/chatusers', model.id, 'runnernotifications']);
  }

  reload() {
    this.populateItems();
  }

  ngOnDestroy() {
    this.subscriptions.forEach(e => {
      if (typeof e === 'function') {
        e();
      } else {
        e.unsubscribe();
      }
    });
    this.subscriptions = null;
  }
}
