import { tassign } from 'tassign';
import {
  BEGIN_SERVER_CALL,
  END_SERVER_CALL,

  ADD_ITEMS_{{pucase}},
  GET_ITEM_{{pucase}},
  CREATE_ITEM_{{pucase}},
  UPDATE_ITEM_{{pucase}},
  DELETE_ITEM_{{pucase}},
  FILTER_{{pucase}},
  FILTER_RESET_{{pucase}}

} from './actions';
import { Action } from 'redux';
import { IAppState } from './store';
import { I{{titlecase}} } from './models/{{dashlcase}}.model';

/**========================= */
// STORE
/**========================= */
export interface IGeneralState {
  version: string;
  serverCallsInProgress: number;
  modalServerCallsInProgress: number;
  // {{titlecase}}
  {{pcamelcase}}: I{{titlecase}}[];
  selected{{titlecase}}: I{{titlecase}};
  {{camelcase}}Query: {
    page: number;
    pageSize: number;
  };
}

export const GENERAL_INITIAL_STATE: IGeneralState = {
  version: '0.0.1',
  serverCallsInProgress: 0,
  modalServerCallsInProgress: 0,
  
  // {{titlecase}}
  {{pcamelcase}}: [],
  selected{{titlecase}}: {},
  {{camelcase}}Query: {
    page: 1,
    pageSize: 10000
  }
};

/**========================= */
// REDUCERS
/**========================= */

export function generalReducer(
  state: IGeneralState = GENERAL_INITIAL_STATE,
  action
): IGeneralState {
  switch (action.type) {
    case BEGIN_SERVER_CALL:
      return beginServerCall(state, action);
    case END_SERVER_CALL:
      return endServerCall(state, action);

    // {{titlecase}}
    case ADD_ITEMS_{{pucase}}:
      return add_items_{{pcamelcase}}(state, action);
    case GET_ITEM_{{pucase}}:
      return get_item_{{pcamelcase}}(state, action);
    case CREATE_ITEM_{{pucase}}:
      return create_item_{{pcamelcase}}(state, action);
    case UPDATE_ITEM_{{pucase}}:
      return update_item_{{pcamelcase}}(state, action);
    case DELETE_ITEM_{{pucase}}:
      return delete_item_{{pcamelcase}}(state, action);
    case FILTER_{{pucase}}:
      return filter_{{pcamelcase}}(state, action);
    case FILTER_RESET_{{pucase}}:
      return filter_reset_{{pcamelcase}}(state, action);

  }
  return state;
}

// {{titlecase}}

function add_items_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    {{pcamelcase}}: action.items
  });
}

function get_item_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    selected{{titlecase}}: action.item
  });
}

function create_item_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    {{pcamelcase}}: state.{{pcamelcase}}.concat(action.item)
  });
}

function update_item_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    {{pcamelcase}}: state.{{pcamelcase}}.map(({{camelcase}}, index) => {
      if ({{camelcase}}.id === action.item.id) {
        return tassign({{camelcase}}, action.item);
      }
      return {{camelcase}};
    }),
    selected{{titlecase}}: action.item
  });
}

function delete_item_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    {{pcamelcase}}: [...state.{{pcamelcase}}.filter(f => f.id != action.item.id)]
  });
}

function filter_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    {{camelcase}}Query: action.query
  });
}

function filter_reset_{{pcamelcase}}(state: IGeneralState, action) {
  return tassign(state, {
    {{camelcase}}Query: {
      page: 1,
      pageSize: 10000
    }
  });
}

// Spinners

function beginServerCall(state: IGeneralState, action): IGeneralState {
  return tassign(state, {
    serverCallsInProgress: state.serverCallsInProgress + 1
  });
}

function endServerCall(state: IGeneralState, action): IGeneralState {
  return tassign(state, {
    serverCallsInProgress: state.serverCallsInProgress - 1
  });
}
